#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>  // ใช้ไลบรารีสำหรับ SH1106G
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <WiFi.h>           // สำหรับ ESP32 หรือ ESP8266
#include <Blynk.h>

#define BLYNK_TEMPLATE_ID "TMPL6NlifZRco"
#define BLYNK_TEMPLATE_NAME "projectiot"
#define BLYNK_AUTH_TOKEN "J3NvgcdwfeXHhRVw1gjPoO4XpbFpu9id"
#include <BlynkSimpleEsp32.h>

// กำหนด Pin สำหรับ LED
const int ledPin1 = 5; 
const int ledPin2 = 0;
const int ledPin3 = 0;
// ข้อมูลการเชื่อมต่อ Wi-Fi
char auth[] = "J3NvgcdwfeXHhRVw1gjPoO4XpbFpu9id"; // ใส่ Auth Token ที่ได้จาก Blynk app
char ssid[] = "hello";  // ใส่ชื่อ Wi-Fi ของคุณ
char pass[] = "Dog1234567";  // ใส่รหัสผ่าน Wi-Fi ของคุณ
float temperature ;
float humidity;
int soilMoistureAnalog ;
int soilMoistureDigital;
float percentage_Soil ;

#define OLED_RESET -1

// กำหนดพินต่าง ๆ
#define DHTPIN 4          
#define DHTTYPE DHT22     
#define SOIL_AO_PIN 33    
#define SOIL_DO_PIN 32    
#define i2c_Address 0x3c

// ตั้งค่าหน้าจอ OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define RELAY_PIN 13
#define RELAY_PIN1 12
#define RELAY_PIN2 14
int soilhumchoose ;




// 'frame_00_delay-0', 32x32px
const unsigned char epd_bitmap_frame_00_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0xf9, 0xff, 0x80, 
	0x00, 0xe1, 0xfe, 0x30, 0x01, 0xc1, 0xee, 0x0c, 0x03, 0x81, 0xe7, 0x02, 0x03, 0x01, 0x87, 0x00, 
	0x06, 0x01, 0x83, 0x80, 0x04, 0x01, 0x81, 0x80, 0x04, 0x01, 0x80, 0x80, 0x00, 0x1f, 0xf8, 0x80, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_02_delay-0', 32x32px
const unsigned char epd_bitmap_frame_02_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x00, 0x00, 0xf9, 0xf0, 0x00, 0x0f, 0xc7, 0xf0, 0x00, 0x1c, 0x3f, 0xfe, 0x00, 
	0x30, 0x71, 0xff, 0xd8, 0x00, 0xf1, 0xfe, 0x00, 0x00, 0xe1, 0xf8, 0x00, 0x01, 0xc1, 0xf8, 0x00, 
	0x01, 0x81, 0xf8, 0x00, 0x01, 0x81, 0xf8, 0x00, 0x01, 0x03, 0xb0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x01, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_01_delay-0', 32x32px
const unsigned char epd_bitmap_frame_01_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0x80, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x07, 0xfb, 0xff, 0x00, 
	0x07, 0x61, 0xfe, 0xf8, 0x00, 0xc1, 0xbc, 0x04, 0x01, 0xc1, 0xbe, 0x00, 0x03, 0x81, 0x9e, 0x01, 
	0x03, 0x01, 0x8e, 0x00, 0x02, 0x01, 0x87, 0x00, 0x02, 0x01, 0x87, 0x00, 0x00, 0x1f, 0xfe, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_03_delay-0', 32x32px
const unsigned char epd_bitmap_frame_03_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x78, 0x00, 0x01, 0xf0, 0xf8, 0x00, 0x1f, 0x8f, 0xf8, 0x00, 0x78, 0x3f, 0xfe, 0x00, 
	0x40, 0x3b, 0xff, 0xf0, 0x00, 0x7b, 0xec, 0x0c, 0x00, 0xf3, 0xec, 0x00, 0x00, 0xf3, 0xe8, 0x00, 
	0x00, 0xe1, 0xe0, 0x00, 0x00, 0xc1, 0xe0, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x3f, 0xfe, 0x00, 
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x01, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_04_delay-0', 32x32px
const unsigned char epd_bitmap_frame_04_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3e, 0x00, 0x07, 0xf0, 0x7c, 0x00, 0x3e, 0x0f, 0xf8, 0x00, 0x40, 0x3f, 0xfe, 0x00, 
	0x00, 0x1f, 0xff, 0xe0, 0x00, 0x3f, 0x9e, 0x18, 0x00, 0x3f, 0x84, 0x00, 0x00, 0x3f, 0x84, 0x00, 
	0x00, 0x3f, 0x80, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x3f, 0xfe, 0x00, 
	0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_06_delay-0', 32x32px
const unsigned char epd_bitmap_frame_06_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xc0, 0x07, 0xf0, 0x1f, 0x80, 0x38, 0x1f, 0xf8, 0x00, 0x80, 0x7f, 0xfc, 0x00, 
	0x00, 0x3f, 0xef, 0x00, 0x00, 0x3f, 0xe7, 0xc0, 0x00, 0x7f, 0x82, 0xe0, 0x00, 0x7f, 0x80, 0x30, 
	0x00, 0x7f, 0x80, 0x10, 0x00, 0xf7, 0x80, 0x00, 0x00, 0xe5, 0x80, 0x00, 0x00, 0x7f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x0f, 0xfc, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_07_delay-0', 32x32px
const unsigned char epd_bitmap_frame_07_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xf0, 0x07, 0xf0, 0x1f, 0xc0, 0x30, 0x1f, 0xf8, 0x00, 0x40, 0xff, 0xf8, 0x00, 
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0xff, 0xcf, 0x00, 0x00, 0xf3, 0xc3, 0xc0, 0x00, 0xf3, 0x81, 0xc0, 
	0x01, 0xe3, 0x80, 0xc0, 0x01, 0xc1, 0x80, 0x00, 0x01, 0x81, 0x80, 0x00, 0x01, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x0f, 0xfc, 0x00, 
	0x00, 0x0f, 0xfc, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_08_delay-0', 32x32px
const unsigned char epd_bitmap_frame_08_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xf8, 0x07, 0xf0, 0x0f, 0xe0, 0x18, 0x0f, 0xfc, 0x00, 0x20, 0xff, 0xfc, 0x00, 
	0x00, 0xf7, 0xfe, 0x00, 0x00, 0xe3, 0xfe, 0x00, 0x01, 0xc1, 0xfe, 0x00, 0x03, 0xc1, 0xfe, 0x00, 
	0x07, 0x81, 0xee, 0x00, 0x07, 0x01, 0xc6, 0x00, 0x06, 0x01, 0x80, 0x00, 0x04, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_09_delay-0', 32x32px
const unsigned char epd_bitmap_frame_09_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xfc, 0x03, 0xf8, 0x07, 0xe0, 0x0c, 0x07, 0xfc, 0x00, 0x10, 0xfb, 0xf4, 0x00, 
	0x00, 0xf7, 0xfe, 0x00, 0x01, 0xe7, 0xfa, 0x00, 0x03, 0xc1, 0xfe, 0x00, 0x03, 0x81, 0xfe, 0x00, 
	0x07, 0x01, 0xfc, 0x00, 0x06, 0x01, 0xb8, 0x00, 0x04, 0x01, 0xb8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_10_delay-0', 32x32px
const unsigned char epd_bitmap_frame_10_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfc, 0x01, 0xfc, 0x07, 0xe0, 0x06, 0x07, 0xfe, 0x00, 0x04, 0xfb, 0xfc, 0x00, 
	0x00, 0xef, 0xfe, 0x00, 0x03, 0xcf, 0xfe, 0x00, 0x07, 0x83, 0xfe, 0x00, 0x07, 0x03, 0xfc, 0x00, 
	0x0e, 0x01, 0xdc, 0x00, 0x0c, 0x01, 0x88, 0x00, 0x08, 0x01, 0x80, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_05_delay-0', 32x32px
const unsigned char epd_bitmap_frame_05_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0x80, 0x07, 0xf0, 0x3f, 0x00, 0x38, 0x0f, 0xf8, 0x00, 0x80, 0x7f, 0xfe, 0x00, 
	0x00, 0x1f, 0xff, 0x80, 0x00, 0x1f, 0xb2, 0xe0, 0x00, 0x1f, 0x82, 0x38, 0x00, 0x3f, 0x80, 0x08, 
	0x00, 0x3d, 0x80, 0x00, 0x00, 0x3d, 0x80, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x3f, 0xfe, 0x00, 
	0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_11_delay-0', 32x32px
const unsigned char epd_bitmap_frame_11_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfc, 0x00, 0xfc, 0x07, 0xe0, 0x01, 0x87, 0xfe, 0x00, 0x00, 0xff, 0xfc, 0x00, 
	0x01, 0xdf, 0xfc, 0x00, 0x03, 0x9f, 0xfc, 0x00, 0x07, 0x1f, 0xbe, 0x00, 0x06, 0x1f, 0x8e, 0x00, 
	0x0c, 0x1f, 0x8e, 0x00, 0x08, 0x0d, 0x86, 0x00, 0x00, 0x09, 0x80, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_15_delay-0', 32x32px
const unsigned char epd_bitmap_frame_15_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x01, 0xff, 0x8e, 0x00, 
	0x07, 0xef, 0xc3, 0x00, 0x1e, 0xcf, 0x81, 0x00, 0x39, 0x8b, 0x80, 0xc0, 0x61, 0x03, 0x80, 0x40, 
	0x81, 0x01, 0x80, 0x60, 0x00, 0x01, 0x80, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_16_delay-0', 32x32px
const unsigned char epd_bitmap_frame_16_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x03, 0xff, 0x8e, 0x00, 
	0x1f, 0xff, 0xe7, 0x00, 0x38, 0x7f, 0x83, 0x80, 0x40, 0x6f, 0x80, 0xc0, 0x00, 0xc7, 0x80, 0xc0, 
	0x00, 0x47, 0x80, 0x60, 0x00, 0x01, 0x80, 0x20, 0x00, 0x01, 0x80, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_13_delay-0', 32x32px
const unsigned char epd_bitmap_frame_13_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf0, 0x00, 0x0f, 0x1f, 0xc0, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x7f, 0xfc, 0x00, 
	0x01, 0xff, 0xf6, 0x00, 0x03, 0xe3, 0xf3, 0x00, 0x07, 0xc1, 0xf1, 0x00, 0x07, 0x01, 0xf1, 0x80, 
	0x0e, 0x01, 0xe0, 0xc0, 0x08, 0x01, 0x80, 0x40, 0x00, 0x01, 0x80, 0x40, 0x00, 0x7f, 0xfc, 0x00, 
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_12_delay-0', 32x32px
const unsigned char epd_bitmap_frame_12_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x08, 0x00, 0xfc, 0x00, 0x7e, 0x0f, 0xc0, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x7f, 0xf8, 0x00, 
	0x01, 0xff, 0xfc, 0x00, 0x03, 0xfd, 0xde, 0x00, 0x06, 0xf9, 0x9e, 0x00, 0x04, 0xf1, 0x9b, 0x00, 
	0x08, 0xe1, 0x93, 0x00, 0x00, 0xc1, 0x81, 0x00, 0x00, 0x81, 0x80, 0x00, 0x00, 0x7f, 0xfe, 0x00, 
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_18_delay-0', 32x32px
const unsigned char epd_bitmap_frame_18_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0x08, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x0f, 0xe0, 0xc0, 0x03, 0xff, 0xbe, 0x00, 
	0x1f, 0x7f, 0xce, 0x00, 0x20, 0x3f, 0x87, 0x00, 0x00, 0x3d, 0x83, 0x80, 0x00, 0x19, 0x83, 0xc0, 
	0x00, 0x19, 0x81, 0xc0, 0x00, 0x01, 0x80, 0xe0, 0x00, 0x01, 0x80, 0x60, 0x00, 0x3f, 0xf8, 0x20, 
	0x00, 0x7f, 0xfc, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_14_delay-0', 32x32px
const unsigned char epd_bitmap_frame_14_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xc0, 0x00, 0x03, 0xdf, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0xff, 0xfc, 0x00, 
	0x03, 0xef, 0xe6, 0x00, 0x0f, 0x8f, 0xe1, 0x00, 0x1f, 0x05, 0xe1, 0x80, 0x1e, 0x00, 0xc0, 0xc0, 
	0x24, 0x01, 0xc0, 0x40, 0x00, 0x01, 0x80, 0x60, 0x00, 0x01, 0x80, 0x20, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_17_delay-0', 32x32px
const unsigned char epd_bitmap_frame_17_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x07, 0xff, 0x00, 0x03, 0xff, 0x9c, 0x00, 
	0x1f, 0xbf, 0xc7, 0x00, 0x30, 0x3f, 0x83, 0x80, 0x00, 0x3d, 0x81, 0x80, 0x00, 0x3d, 0x80, 0xc0, 
	0x00, 0x2d, 0x80, 0x40, 0x00, 0x01, 0x80, 0x60, 0x00, 0x01, 0x80, 0x20, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0x1f, 0xe0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_19_delay-0', 32x32px
const unsigned char epd_bitmap_frame_19_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1c, 0x06, 0x00, 0x00, 0x7e, 0x3f, 0xe0, 0x00, 0x1f, 0xa0, 0x30, 0x00, 0xff, 0xbc, 0x00, 
	0x0c, 0x73, 0xfc, 0x00, 0x00, 0x67, 0x9e, 0x00, 0x00, 0x23, 0x8f, 0x00, 0x00, 0x23, 0x8f, 0x00, 
	0x00, 0x21, 0x87, 0x80, 0x00, 0x01, 0x83, 0x80, 0x00, 0x03, 0x81, 0x80, 0x00, 0x7f, 0xfd, 0x80, 
	0x00, 0x7f, 0xfc, 0x80, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x07, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_20_delay-0', 32x32px
const unsigned char epd_bitmap_frame_20_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xf0, 0x03, 0x00, 0x01, 0xfc, 0x0d, 0xf8, 0x00, 0x3f, 0xf8, 0x0c, 0x00, 0xff, 0xfc, 0x00, 
	0x06, 0x69, 0xfc, 0x00, 0x08, 0x41, 0xfc, 0x00, 0x00, 0x41, 0xfe, 0x00, 0x00, 0x41, 0xfe, 0x00, 
	0x00, 0x01, 0xbe, 0x00, 0x00, 0x01, 0x9e, 0x00, 0x00, 0x01, 0x9e, 0x00, 0x00, 0x7f, 0xfe, 0x00, 
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x07, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_21_delay-0', 32x32px
const unsigned char epd_bitmap_frame_21_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xc0, 0x00, 0x00, 0x03, 0xf8, 0x1f, 0xf8, 0x00, 0x3f, 0xf0, 0x06, 0x00, 0x7f, 0xf8, 0x00, 
	0x03, 0xe7, 0xf8, 0x00, 0x02, 0x01, 0xfc, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x01, 0xf8, 0x00, 
	0x00, 0x01, 0xf8, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x7f, 0xfc, 0x00, 
	0x00, 0x7f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_22_delay-0', 32x32px
const unsigned char epd_bitmap_frame_22_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x80, 0x00, 0x00, 0x07, 0xf0, 0x0f, 0xf8, 0x00, 0x3f, 0xf0, 0x06, 0x00, 0x7f, 0xfc, 0x00, 
	0x00, 0x73, 0xfe, 0x00, 0x00, 0xc3, 0xfe, 0x00, 0x00, 0x43, 0xef, 0x00, 0x00, 0x43, 0xe7, 0x00, 
	0x00, 0x03, 0xe2, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_23_delay-0', 32x32px
const unsigned char epd_bitmap_frame_23_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0x80, 0x03, 0x00, 0x03, 0xff, 0x1f, 0xf8, 0x00, 0x3f, 0xf8, 0x0e, 0x00, 0x7f, 0xfe, 0x01, 
	0x00, 0x7f, 0xe7, 0x00, 0x00, 0x5f, 0x87, 0x80, 0x00, 0x4f, 0x83, 0x80, 0x00, 0x0f, 0x81, 0x80, 
	0x00, 0x0f, 0x80, 0x80, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_24_delay-0', 32x32px
const unsigned char epd_bitmap_frame_24_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x7f, 0x00, 0x00, 0x00, 0x03, 0xf6, 0x1f, 0xe0, 0x00, 0x3f, 0xf8, 0x3c, 0x00, 0x3f, 0xee, 0x06, 
	0x00, 0x6f, 0xe7, 0x80, 0x00, 0x7f, 0x83, 0xc0, 0x00, 0x3f, 0x81, 0xc0, 0x00, 0x3f, 0x80, 0xe0, 
	0x00, 0x3f, 0x80, 0x60, 0x00, 0x3d, 0x80, 0x00, 0x00, 0x3d, 0x80, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 
	0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1f, 0xe0, 0x00, 
	0x00, 0x1f, 0xe0, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_27_delay-0', 32x32px
const unsigned char epd_bitmap_frame_27_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0x7c, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0x00, 
	0x00, 0x7f, 0x8f, 0x80, 0x00, 0xef, 0x83, 0x40, 0x00, 0xcd, 0x80, 0x20, 0x01, 0x85, 0x80, 0x10, 
	0x03, 0x81, 0x80, 0x08, 0x03, 0x01, 0x80, 0x00, 0x02, 0x01, 0x80, 0x00, 0x06, 0x7f, 0xfe, 0x00, 
	0x04, 0x7f, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_28_delay-0', 32x32px
const unsigned char epd_bitmap_frame_28_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0x00, 
	0x00, 0x77, 0xff, 0x80, 0x00, 0xc7, 0x99, 0xc0, 0x01, 0x87, 0x80, 0x00, 0x03, 0x01, 0x80, 0x20, 
	0x03, 0x01, 0x80, 0x10, 0x06, 0x01, 0x80, 0x00, 0x04, 0x01, 0xc0, 0x00, 0x04, 0x7f, 0xfe, 0x00, 
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_25_delay-0', 32x32px
const unsigned char epd_bitmap_frame_25_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3f, 0x80, 0x00, 0x00, 0x00, 0xff, 0x3f, 0xc0, 0x00, 0x7f, 0xf9, 0xf0, 0x00, 0x3f, 0xff, 0xb8, 
	0x00, 0x3f, 0xf3, 0x88, 0x00, 0x3d, 0xc0, 0xc0, 0x00, 0x39, 0x80, 0x60, 0x00, 0x79, 0x80, 0x20, 
	0x00, 0xf1, 0x80, 0x10, 0x00, 0xf1, 0x80, 0x10, 0x00, 0xe7, 0x80, 0x00, 0x00, 0xff, 0xfc, 0x00, 
	0x00, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_29_delay-0', 32x32px
const unsigned char epd_bitmap_frame_29_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x38, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0x80, 
	0x00, 0xe7, 0xe3, 0xe0, 0x01, 0x83, 0x81, 0xf0, 0x01, 0x03, 0x80, 0xd0, 0x02, 0x01, 0x80, 0x60, 
	0x04, 0x01, 0x80, 0x20, 0x0c, 0x01, 0x80, 0x10, 0x08, 0x01, 0x80, 0x10, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x07, 0xf8, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_30_delay-0', 32x32px
const unsigned char epd_bitmap_frame_30_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1c, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xc0, 
	0x00, 0xfd, 0xfe, 0x70, 0x01, 0xb9, 0xc7, 0x18, 0x03, 0x01, 0xc3, 0x84, 0x02, 0x01, 0x81, 0xc0, 
	0x06, 0x01, 0x80, 0xc0, 0x0c, 0x01, 0x80, 0x60, 0x08, 0x01, 0x80, 0x20, 0x00, 0x1f, 0xf8, 0x20, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x0f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x07, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'frame_26_delay-0', 32x32px
const unsigned char epd_bitmap_frame_26_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x40, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xe0, 
	0x00, 0x3f, 0xbd, 0xe0, 0x00, 0x79, 0x98, 0xe0, 0x00, 0x79, 0x80, 0x60, 0x00, 0xe9, 0x80, 0x30, 
	0x01, 0xc1, 0x80, 0x10, 0x01, 0xc1, 0x80, 0x00, 0x01, 0x83, 0x80, 0x00, 0x01, 0xff, 0xfe, 0x00, 
	0x01, 0x7f, 0xfc, 0x00, 0x01, 0x7f, 0xfc, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x07, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};










Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); 

// สร้างอ็อบเจกต์ DHT


DHT dht(DHTPIN, DHTTYPE);
int leg;
int pinValue;
int tempchoose=0;
BLYNK_WRITE(V7) {
    tempchoose = param.asInt();  
    Serial.print("Temperature threshold set to: ");
    Serial.println(tempchoose);
}
BLYNK_WRITE(V6) {
  leg = param.asInt();
  pinValue = 0 ;
  analogWrite(ledPin1, 0); 
  analogWrite(ledPin2, 0); 
  analogWrite(ledPin3, 0);
  Serial.println(leg); 
}
//กำหนดขาledว่าเลือกขาไหนเป็นสีอะไร
BLYNK_WRITE(V1) {
  pinValue = param.asInt();

if(leg == 0){
  analogWrite (ledPin1,pinValue);
  Serial.print("V1 Slider value is: ");
  Serial.println(pinValue); 
}else if (leg == 1){
  analogWrite (ledPin2,pinValue);
  Serial.print("V1 Slider value is: ");
  Serial.println(pinValue); 
}else if (leg == 2){
  analogWrite (ledPin3,pinValue);
  Serial.print("V1 Slider value is: ");
  Serial.println(pinValue); 
}
}
BLYNK_WRITE(V5) {
  soilhumchoose = param.asInt();  // อัปเดตค่าจาก Blynk
  Serial.print("Soil humidity threshold set to: ");
  Serial.println(soilhumchoose);
}

void setup() {
  // เริ่มการทำงานของ Serial Monitor
  Serial.begin(115200);
  // เริ่มต้นการเชื่อมต่อกับ Blynk
   Blynk.begin(auth, ssid, pass);


 
  
   Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, pass);
  
  // ตรวจสอบการเชื่อมต่อ Wi-Fi
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  
  pinMode(RELAY_PIN, OUTPUT);       // ตั้งค่าให้รีเลย์เป็น OUTPUT
  digitalWrite(RELAY_PIN, HIGH); 
  pinMode(RELAY_PIN1, OUTPUT);       // ตั้งค่าให้รีเลย์เป็น OUTPUT
  digitalWrite(RELAY_PIN1, HIGH);    // ปิดรีเลย์เริ่มต้น
  pinMode(RELAY_PIN2, OUTPUT);       // ตั้งค่าให้รีเลย์เป็น OUTPUT
  digitalWrite(RELAY_PIN2, HIGH);
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);
  tempchoose = 100;
  soilhumchoose= 10;

  // เมื่อเชื่อมต่อสำเร็จ
  Serial.println();
  Serial.println("Connected to Wi-Fi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());  // แสดง IP Address


  // เริ่มต้นจอ OLED
  display.begin(i2c_Address, true);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);  // ใช้สีขาวสำหรับข้อความ

  // เริ่มต้นเซนเซอร์ DHT
  dht.begin();

  // ตั้งค่าโหมดพิน
  pinMode(SOIL_DO_PIN, INPUT);

  // แสดงข้อความเริ่มต้น
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();
  delay(2000);
}





void loop() {
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();
  soilMoistureAnalog = analogRead(SOIL_AO_PIN);
  soilMoistureDigital = digitalRead(SOIL_DO_PIN);
  percentage_Soil = 100-((float(soilMoistureAnalog) / 4095.0) * 100);
  OLEDupdate();
  Blynkupdate();
   // ควบคุมพัดลม (Relay1) ตามอุณหภูมิ
  if (temperature > tempchoose) {
    digitalWrite(RELAY_PIN1, HIGH);  // เปิดพัดลม
  } else {
    digitalWrite(RELAY_PIN1, LOW); // ปิดพัดลม
  }
  Relayupdate();
    
  }
void OLEDupdate(){

    static unsigned long lastOLEDUpdate = 0;
  if (millis() - lastOLEDUpdate > 1000){
  
  Serial.print(F("Temp: "));
  Serial.print(temperature);
  Serial.println(F(" *C"));
  Serial.print(F("Humidity: "));
  Serial.print(humidity);
  Serial.println(F(" %"));
  Serial.print(F("Soil Moisture (Analog):"));
  Serial.println(percentage_Soil);
  Serial.print(F("Soil Moisture (Digital): "));
  Serial.println(soilMoistureDigital ? "Dry" : "Wet");
  Serial.println(tempchoose);
  Serial.print(F("LEG LED:"));
  Serial.println(leg); 
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("DHT22 Sensor:");
  display.print("Temp: ");
  display.print(temperature);
  display.println(" C");
  display.print("Humidity: ");
  display.print(humidity);
  display.println(" %");
  display.println();
  display.println("Soil Sensor:");
  display.print("Humi: ");
  display.print(percentage_Soil);
  display.println(" %");
  display.print("Digital: ");
  display.println(soilMoistureDigital ? "Dry" : "Wet");
  Serial.println(soilhumchoose);
  int img_width = 32; // กำหนดขนาดภาพ (ควรปรับให้ตรงกับขนาดจริงของภาพ)
  int img_height = 32; // กำหนดขนาดภาพ
  int x_pos = SCREEN_WIDTH - img_width - 5;  // ตำแหน่ง x ในมุมขวาล่าง
  int y_pos = SCREEN_HEIGHT - img_height - 5; // ตำแหน่ง y ในมุมขวาล่าง

   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_00_delay_0, img_width, img_height, SH110X_WHITE);
   display.display();
   delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_01_delay_0, img_width, img_height, SH110X_WHITE);

   display.display();
   delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_02_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_03_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_04_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_05_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_06_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_07_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_08_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_09_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_10_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_11_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_12_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_13_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_14_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_15_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_16_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_17_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_18_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_19_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_20_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_21_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_22_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_23_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_24_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_25_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_26_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
   display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_27_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_28_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
  display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_29_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);
  display.drawBitmap(x_pos, y_pos, epd_bitmap_frame_30_delay_0, img_width, img_height, SH110X_WHITE);

  display.display();
  delay(100);
   display.fillRect(x_pos, y_pos, img_width, img_height, SH110X_BLACK);


  }

}
void Blynkupdate(){

  static unsigned long lastRelayUpdate = 0;
  if (millis() - lastRelayUpdate > 2000){
  Blynk.virtualWrite(V3, temperature);  
  Blynk.virtualWrite(V2, humidity);
  Blynk.virtualWrite(V4, percentage_Soil);  
  Blynk.virtualWrite(V3, temperature);  
  Blynk.virtualWrite(V2, humidity);
  Blynk.virtualWrite(V4, percentage_Soil);
  Blynk.virtualWrite(V7,tempchoose);

  }
}
void Relayupdate() {
  // การจัดการปั๊มน้ำ (Relay)
  static unsigned long lastUpdate = 0;
  static unsigned long relayStartTime = 0;
  static bool soilRelayActive = false;    // สถานะของ Soil Relay
  static bool soilRelayCooldown = false; // สถานะ Cooldown ของ Soil Relay

  unsigned long currentMillis = millis();

  if (currentMillis - lastUpdate > 1000) {
    lastUpdate = currentMillis;

    // เปิดปั๊มน้ำเมื่อความชื้นต่ำกว่าเกณฑ์
    if (!soilRelayActive && !soilRelayCooldown && percentage_Soil <= soilhumchoose) {
      digitalWrite(RELAY_PIN, LOW);       // เปิดปั๊มน้ำ
      Serial.println("Soil Relay ON");
      soilRelayActive = true;
      relayStartTime = currentMillis;    // บันทึกเวลาเริ่มต้น
    }

    // ปิดปั๊มน้ำหลังจากทำงาน 2 วินาที
    if (soilRelayActive && currentMillis - relayStartTime >= 500) {
      digitalWrite(RELAY_PIN, HIGH);     // ปิดปั๊มน้ำ
      Serial.println("Soil Relay OFF");
      soilRelayActive = false;
      soilRelayCooldown = true;         // เข้าสู่ช่วง Cooldown
      relayStartTime = currentMillis;   // บันทึกเวลาเริ่มต้น Cooldown
    }

    // จัดการ Cooldown 10 วินาที
    if (soilRelayCooldown && currentMillis - relayStartTime >= 10000) {
      soilRelayCooldown = false; 
      Serial.println("Soil Relay Cooldown Complete");
    }
  }
}

